<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Thesaurus</title>

    <script type="text/javascript" src="/FichiersWebGL/WebGL.js"></script>
    <script type="text/javascript" src="/FichiersWebGL/ShaderCouleursTextures.js"></script>
    <script type="text/javascript" src="/FichiersWebGL/glMatrix-0.9.5.min.js"></script>
    <script type="text/javascript" src="/FichiersWebGL/Transformations.js"></script>
    <script type="text/javascript" src="/FichiersWebGL/Camera.js"></script>
    <script type="text/javascript" src="/FichiersWebGL/Textures.js"></script>


    <script type="text/javascript" src="/Objets/Plafond.js"></script>
    <script type="text/javascript" src="/Objets/Mur.js"></script>
    <script type="text/javascript" src="/Objets/IndicateurMap.js"></script>
    <script type="text/javascript" src="/Objets/Sol.js"></script>
    <script type="text/javascript" src="/Objets/TeleTransporteur.js"></script>
    <script type="text/javascript" src="/Objets/TeleRecepteur.js"></script>
    <script type="text/javascript" src="/Objets/Chest.js"></script>
    <script type="text/javascript" src="/Objets/Fleche.js"></script>

    <script type="text/javascript" src="/Jeu/Deplacement.js"></script>
    <script type="text/javascript" src="/Jeu/Score.js"></script>
    <script type="text/javascript" src="/Jeu/Niveau.js"></script>
    <script type="text/javascript" src="/Jeu/Teleportation.js"></script>

    <script type="text/javascript" src="/map.js"></script>
    <script type="text/javascript" src="/spawnDoor.js"></script>

    <link rel="stylesheet"
        href="https://cdnjs.cloudflare.com/ajax/libs/odometer.js/0.4.8/themes/odometer-theme-default.min.css" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/odometer.js/0.4.8/odometer.min.js"></script>

    <script type="text/javascript">

        let objgl = null;
        let objProgShaders = null;
        let objScene3D = null;
        let score = 300;
        //VARIABLE GLOBALE POUR LE TEMPS
        const DUREE_NIVEAU = 60;

        const tabImages = ['/Textures/Transparent.gif', '/Textures/planks_spruce.png', '/Textures/Ciel.png',
            '/Textures/stonebrick_mossy.png', '/Textures/sandstone_normal.png'
            , '/Textures/beacon.png', '/Textures/purpur_pillar_top.png', '/Textures/diamond_ore.png',
            '/Textures/fleche.jpg', '/Textures/concrete_powder_silver.png'];
        const TEX_TRANSPARENT = 0;
        const TEX_SOL = 1;
        const TEX_CIEL = 2;
        const TEX_MUR = 3;
        const TEX_MUR_OUVRABLE = 4
        const TEX_TELETRANS = 5;
        const TEX_TELERECP = 6;
        const TEX_CHEST = 7;
        const TEX_FLECHE = 8;
        const TEX_SPAWN = 9;

        let tempsRestant = null;
        let penaliteVueAerienne = null;
        let jeuTermine = false;
        let cameraSauvPos = null;
        let cameraSauvTarget = null;
        let estEnVueMap = false;
        let posJoueur = null;
        let cibleJoueur = null;
        let posJoueurLive = null;
        let cibleJoueurLive = null;
        let nbOuvreurs = 4;
        let tricheActive = false;
        let temps = DUREE_NIVEAU;
        let tabFleches = [];
        let tabTeleporteurs = [];
        let tabRecepteurs = [];
        let objTresor = null;
        let niveauEnTransition = false;
        let memoNiveau = null;
        let map = [];
        let tempsDemarre = false;
        let etaitSurE = false;
        let aQuitteEnclos = false;



        async function demarrer() {
            const objCanvas = document.getElementById('monCanvas');
            objgl = initWebGL(objCanvas);
            objProgShaders = initShaders(objgl);
            objScene3D = await initScene3D(objgl);
            document.getElementById("sonDebutNiveau").play();


            effacerCanevas(objgl);
            dessiner(objgl, objProgShaders, objScene3D);
        }

        async function initScene3D(objgl) {
            const objScene3D = new Object();
            const tabObjets3D = new Array();
            objScene3D.enclosVerrouille = false;
            objScene3D.aQuitteEnclos = false;


            map = initMap();

            objScene3D.textures = await creerTextures(objgl, tabImages);
            objScene3D.teleporteurs = [];
            objScene3D.recepteurs = [];

            const obj3DSol = creerObj3DSol(objgl, TEX_SOL);
            tabObjets3D.push(obj3DSol);

            for (let z = 0; z < map.length; z++) {
                for (let x = 0; x < map[z].length; x++) {
                    const type = map[z][x];
                    if (type === "S" || type === "A" || type === "E") {
                        const patch = creerObj3DSol(objgl, TEX_SPAWN);
                        patch.fltLargeur = 1;
                        patch.fltProfondeur = 1;

                        patch.vertex = creerVertexSol(objgl, 1, 1);
                        patch.texels = creerTexelsSol(objgl, 1, 1, TEX_SPAWN);

                        setPositionX(x, patch.transformations);
                        setPositionZ(z, patch.transformations);
                        setPositionY(0.01, patch.transformations);
                        tabObjets3D.push(patch);
                    }
                }
            }

            const obj3DPlafond = creerObj3DPlafond(objgl, TEX_CIEL, 2.3); //tu peut regler l'hauteur
            tabObjets3D.push(obj3DPlafond);
            objScene3D.plafond = obj3DPlafond;


            //Generation des murs ouvrables et non ouvrables
            for (let z = 0; z < map.length; z++) {
                for (let x = 0; x < map[z].length; x++) {
                    const cellule = map[z][x];

                    if (cellule === "b") {
                        const mur = creerObj3DMur(objgl, TEX_MUR, 2.5); // non ouvrable 
                        setPositionX(x, mur.transformations);
                        setPositionZ(z, mur.transformations);
                        setPositionY(0, mur.transformations);
                        tabObjets3D.push(mur);
                    }

                    if (cellule === "w") {
                        const mur = creerObj3DMur(objgl, TEX_MUR_OUVRABLE, 2.5); // ouvrable 
                        setPositionX(x, mur.transformations);
                        setPositionZ(z, mur.transformations);
                        setPositionY(0, mur.transformations);
                        tabObjets3D.push(mur);
                    }

                    if (cellule === "d") {
                        const mur = creerObj3DMur(objgl, TEX_MUR_OUVRABLE, 2.5);
                        setPositionX(x, mur.transformations);
                        setPositionZ(z, mur.transformations);
                        setPositionY(0, mur.transformations);
                        objScene3D.posPorteSpawn = { x, z };
                        objScene3D.porteSpawn = mur;
                        tabObjets3D.push(mur);
                    }
                }
            }

            setTimeout(() => {
                baisserPorteGraduellement(objScene3D.porteSpawn, objScene3D);
            }, 5000);

            const cellulesLibres = [];

            for (let z = 0; z < map.length; z++) {
                for (let x = 0; x < map[z].length; x++) {
                    if (map[z][x] === "g") {
                        cellulesLibres.push({ x, z });
                    }
                }
            }
            const randomIndex = Math.floor(Math.random() * cellulesLibres.length);
            const cellule = cellulesLibres[randomIndex];

            const coffre = creerObj3DChest(objgl, TEX_CHEST);
            setPositionX(cellule.x + 0.5, coffre.transformations);
            setPositionZ(cellule.z + 0.5, coffre.transformations);
            setPositionY(0, coffre.transformations);
            tabObjets3D.push(coffre);
            coffre.binVisible = false;
            objTresor = coffre;
            objScene3D.coffre = { x: cellule.x, z: cellule.z, objet: coffre };
            //console.log("Coffre placé à", cellule.x, cellule.z);
            const objNiveau = obtenirObjetsPourNiveau(niveau);

            nbOuvreurs = objNiveau.ouvreurs;

            placerTeleporteursEtRecepteurs(objgl, objScene3D, tabObjets3D, objNiveau.teleporteurs, objNiveau.recepteurs);
            placerFlechesVersTresor(objgl, objScene3D, TEX_FLECHE, tabObjets3D);

            objScene3D.tabObjets3D = tabObjets3D;

            // La caméra
            let spawnX = 0, spawnZ = 0;
            const camera = creerCamera();
            for (let z = 0; z < map.length; z++) {
                for (let x = 0; x < map[z].length; x++) {
                    if (map[z][x] === "A") {
                        spawnX = x;
                        spawnZ = z;
                        break;
                    }
                }
                if (map[spawnZ][spawnX] === "A") break;
            }

            spawnX += 0.5;
            spawnZ += 0.5;

            setPositionsCameraXYZ([spawnX, 0.6, spawnZ], camera);
            setCiblesCameraXYZ([spawnX, 0.6, spawnZ - 0.5], camera);
            posJoueur = [spawnX, 0.6, spawnZ];
            cibleJoueur = [spawnX, 0.6, spawnZ - 0.5];
            function placerFlechesVersTresor(objgl, objScene3D, intNoTexture, tabObjets3D) {
                const cellulesLibres = [];

                for (let z = 0; z < map.length; z++) {
                    for (let x = 0; x < map[z].length; x++) {
                        if (map[z][x] === "g") {
                            const isTresor = (x === objScene3D.coffre.x && z === objScene3D.coffre.z);
                            const isTeleporteur = objScene3D.teleporteurs.some(tp => tp.x === x && tp.z === z);
                            const isRecepteur = objScene3D.recepteurs.some(r => r.x === x && r.z === z);

                            if (!isTresor && !isTeleporteur && !isRecepteur) {
                                cellulesLibres.push({ x, z });
                            }
                        }
                    }
                }



                let nbFleches = objNiveau.fleches;
                nbFleches = Math.max(nbFleches, 0); // Pas négatif

                const positionsUtilisees = new Set();

                for (let i = 0; i < nbFleches && cellulesLibres.length > 0; i++) {
                    const index = Math.floor(Math.random() * cellulesLibres.length);
                    const { x, z } = cellulesLibres.splice(index, 1)[0];
                    const key = `${x},${z}`;
                    if (positionsUtilisees.has(key)) continue;

                    const objFleche = creerObj3DFleche(objgl, intNoTexture);

                    setPositionX(x + 0.5, objFleche.transformations);
                    setPositionZ(z + 0.5, objFleche.transformations);
                    setPositionY(1.9, objFleche.transformations);

                    // Calcul angle vers le trésor
                    const coffreX = objScene3D.coffre.x + 0.5;
                    const coffreZ = objScene3D.coffre.z + 0.5;
                    const dx = coffreX - (x + 0.5);
                    const dz = coffreZ - (z + 0.5);
                    const angleRad = Math.atan2(dx, dz);
                    const angleDeg = angleRad * 180 / Math.PI;

                    setAngleY(angleDeg, objFleche.transformations);

                    tabObjets3D.push(objFleche);
                    tabFleches.push(objFleche);
                    positionsUtilisees.add(key);
                }
            }


            setOrientationsXYZ([0, 1, 0], camera);
            objScene3D.camera = camera;

            const indicateur = creerObj3DIndicateur(objgl);
            tabObjets3D.push(indicateur);
            objScene3D.indicateur = indicateur;

            saveMemoNiveau(objScene3D);
            console.log(`Niveau ${niveau} — Flèches: ${objNiveau.fleches}, TP: ${objNiveau.teleporteurs}, R: ${objNiveau.recepteurs}, Ouvreurs: ${objNiveau.ouvreurs}`);
            return objScene3D;
        }


        function dessiner(objgl, objProgShaders, objScene3D) {
            // La vue
            objgl.viewport(0, 0, objgl.drawingBufferWidth, objgl.drawingBufferHeight);
            if (estEnVueMap && objScene3D.indicateur) {

                mettreAJourVisibiliteTriche();
                const pos = posJoueurLive;
                const cible = cibleJoueurLive;
                const dx = cible[0] - pos[0];
                const dz = cible[2] - pos[2];
                const angle = Math.atan2(dx, dz) * 180 / Math.PI;

                setPositionX(pos[0], objScene3D.indicateur.transformations);
                setPositionZ(pos[2], objScene3D.indicateur.transformations);
                setPositionY(1, objScene3D.indicateur.transformations);
                setAngleY(angle, objScene3D.indicateur.transformations);
            } else {
                //pour ne pas voir l'indicateur quand nous somme en vue premiere personne
                setPositionY(-1, objScene3D.indicateur.transformations);
            }

            // Matrice de projection
            const matProjection = mat4.create();
            const fltRapportCanevas = objgl.drawingBufferWidth / objgl.drawingBufferHeight;

            if (estEnVueMap) {
                // Projection orthographique (2D) pour la vue aérienne
                const mapSize = 31;
                const orthoScale = 1.0;

                mat4.ortho(
                    -mapSize / 2 * orthoScale * fltRapportCanevas,
                    mapSize / 2 * orthoScale * fltRapportCanevas,
                    -mapSize / 2 * orthoScale,
                    mapSize / 2 * orthoScale,
                    0.1,
                    100,
                    matProjection
                );
            } else {
                // Projection perspective normale pour la vue à la première personne
                mat4.perspective(45, fltRapportCanevas, 0.01, 100, matProjection);
            }

            // Relier la matrice aux shaders
            objgl.uniformMatrix4fv(objProgShaders.matProjection, false, matProjection);

            for (let i = 0; i < objScene3D.tabObjets3D.length; i++) {

                const vertex = objScene3D.tabObjets3D[i].vertex;
                const couleurs = objScene3D.tabObjets3D[i].couleurs;
                const texels = objScene3D.tabObjets3D[i].texels;
                const maillage = objScene3D.tabObjets3D[i].maillage;
                const transformations = objScene3D.tabObjets3D[i].transformations;
                const objet = objScene3D.tabObjets3D[i];
                if (estEnVueMap && objet.binVisible === false) continue;


                const matModeleVue = mat4.create();
                mat4.identity(matModeleVue);

                mat4.lookAt(getPositionsCameraXYZ(objScene3D.camera),
                    getCiblesCameraXYZ(objScene3D.camera),
                    getOrientationsXYZ(objScene3D.camera),
                    matModeleVue);

                mat4.translate(matModeleVue, getPositionsXYZ(transformations));
                mat4.scale(matModeleVue, getEchellesXYZ(transformations));
                mat4.rotateX(matModeleVue, getAngleX(transformations) * Math.PI / 180);
                mat4.rotateY(matModeleVue, getAngleY(transformations) * Math.PI / 180);
                mat4.rotateZ(matModeleVue, getAngleZ(transformations) * Math.PI / 180);

                objgl.uniformMatrix4fv(objProgShaders.matModeleVue, false, matModeleVue);

                if (maillage == null)
                    // Dessiner les sous-objets
                    for (let j = 0; j < vertex.length; j++) {

                        // Relier les vertex aux shaders
                        objgl.bindBuffer(objgl.ARRAY_BUFFER, vertex[j]);
                        objgl.vertexAttribPointer(objProgShaders.posVertex, 3, objgl.FLOAT, false, 0, 0);
                        const intNbVertex = (objgl.getBufferParameter(objgl.ARRAY_BUFFER, objgl.BUFFER_SIZE) / 4) / 3;

                        // Relier les couleurs aux shaders
                        objgl.bindBuffer(objgl.ARRAY_BUFFER, couleurs[j]);
                        objgl.vertexAttribPointer(objProgShaders.couleurVertex, 4, objgl.FLOAT, false, 0, 0);

                        // Activer la texture
                        objgl.activeTexture(objgl.TEXTURE0 + texels[j].intNoTexture);
                        objgl.bindTexture(objgl.TEXTURE_2D, objScene3D.textures[texels[j].intNoTexture]);

                        // Relier les texels aux shaders
                        objgl.bindBuffer(objgl.ARRAY_BUFFER, texels[j]);
                        objgl.vertexAttribPointer(objProgShaders.posTexel, 2, objgl.FLOAT, false, 0, 0);

                        // Relier le no de texture et le taux de couleur aux shaders                 
                        objgl.uniform1i(objProgShaders.noTexture, texels[j].intNoTexture);
                        objgl.uniform1f(objProgShaders.pcCouleurTexel, texels[j].pcCouleurTexel);

                        // Dessiner
                        objgl.drawArrays(vertex[j].typeDessin, 0, intNbVertex);
                    }
                else { // Dessiner le maillage

                    // Relier les vertex aux shaders
                    objgl.bindBuffer(objgl.ARRAY_BUFFER, vertex);
                    objgl.vertexAttribPointer(objProgShaders.posVertex, 3, objgl.FLOAT, false, 0, 0);

                    // Relier les couleurs aux shaders
                    objgl.bindBuffer(objgl.ARRAY_BUFFER, couleurs);
                    objgl.vertexAttribPointer(objProgShaders.couleurVertex, 4, objgl.FLOAT, false, 0, 0)

                    // Activer la texture
                    objgl.activeTexture(objgl.TEXTURE0 + texels.intNoTexture);
                    objgl.bindTexture(objgl.TEXTURE_2D, objScene3D.textures[texels.intNoTexture]);

                    // Relier les texels aux shaders
                    objgl.bindBuffer(objgl.ARRAY_BUFFER, texels);
                    objgl.vertexAttribPointer(objProgShaders.posTexel, 2, objgl.FLOAT, false, 0, 0);

                    // Relier le no de texture et le taux de couleur aux shaders                 
                    objgl.uniform1i(objProgShaders.noTexture, texels.intNoTexture);
                    objgl.uniform1f(objProgShaders.pcCouleurTexel, texels.pcCouleurTexel);

                    // Sélectionner le maillage qu'on va utiliser pour les triangles et les droites
                    objgl.bindBuffer(objgl.ELEMENT_ARRAY_BUFFER, maillage);

                    // Dessiner les triangles
                    objgl.drawElements(objgl.TRIANGLES, maillage.intNbTriangles * 3, objgl.UNSIGNED_SHORT, 0);
                    // Dessiner les droites à la suite des triangles
                    objgl.drawElements(objgl.LINES, maillage.intNbDroites * 2, objgl.UNSIGNED_SHORT, maillage.intNbTriangles * 2 * 3);
                }
            }
        }

        function effacerCanevas(objgl) {

            objgl.clearColor(0.0, 0.0, 0.0, 1.0);

            objgl.clear(objgl.COLOR_BUFFER_BIT | objgl.DEPTH_BUFFER_BIT);
        }
        function mettreAJourVisibiliteTriche() {
            if (!estEnVueMap) return;

            for (const fleche of tabFleches) {
                fleche.binVisible = tricheActive;
            }
            for (const tp of tabTeleporteurs) {
                tp.binVisible = tricheActive;
            }
            for (const recepteur of tabRecepteurs) {
                recepteur.binVisible = tricheActive;
            }
            if (objScene3D && objScene3D.coffre?.objet) {
                objScene3D.coffre.objet.binVisible = tricheActive;
            }
        }

        //TRICHE CTRL + SHIFT + SPACE
        window.addEventListener("keydown", function (event) {
            if (event.ctrlKey && event.shiftKey && event.code === "Space") {
                if (!estEnVueMap) return;

                tricheActive = !tricheActive;
                mettreAJourVisibiliteTriche();

                if (estEnVueMap) {
                    effacerCanevas(objgl);
                    dessiner(objgl, objProgShaders, objScene3D);
                }
            }
            //POUR TESTER NBR DE RECEP/TELETRANS PAR NIVEAU
            if (event.code === "KeyN") {
                niveau++;
                console.log("Passage manuel au niveau", niveau);
                niveauEnTransition = true;
                initScene3D(objgl).then((scene) => {
                    objScene3D = scene;
                    effacerCanevas(objgl);
                    dessiner(objgl, objProgShaders, objScene3D);
                    niveauEnTransition = false;
                });
            }

        });
    </script>
</head>

<body onload="demarrer()">
    <div id="gameWrapper" style="position: relative; width: 1920px; height: 1080px; margin: auto;">
        <canvas id="monCanvas" width="1920" height="1080" tabindex="1" onkeydown="deplacerCamera(); return false"
            style="display: block;">
            Votre navigateur ne supporte pas la balise canvas
        </canvas>

        <div id="messageGameOver" style="display: none;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    font-size: 250px;
    white-space: nowrap;
    color: darkred;
    padding: 30px;
    font-family: 'Press Start 2P', fantasy;
    z-index: 999;">
            GAME OVER
        </div>

        <div id="messageNiveauReussi" style="display: none;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    font-size: 60px;
    color: gold;
    background: rgba(0,0,0,0.8);
    padding: 30px;
    border: 5px solid gold;
    border-radius: 15px;
    font-family: Arial, sans-serif;
    z-index: 999;">
            NIVEAU RÉUSSI
        </div>

        <div id="messageJeuReussi" style="display: none;
   position: absolute;
   top: 50%;
   left: 50%;
   transform: translate(-50%, -50%);
   font-size: 60px;
   color: #33ff3f;
   background: rgba(0,0,0,0.8);
   padding: 30px;
   border: 5px solid #33ff3f;
   border-radius: 15px;
   font-family: Arial, sans-serif;
   z-index: 999;">
            FÉLICITATIONS!!! <br>
            VOUS AVEZ GAGNÉ!!!
        </div>

        <div id="infoJeu"
            style="text-align: center; font-family: fantasy; font-size: 30px; color: rgb(255, 0, 0); font-weight: bolder ;padding: 10px; margin-top: 10px; position: absolute; bottom: 10px; left: 50%; text-align: center; transform: translateX(-50%); z-index: 1000;">
            <span style="margin-right: 6px;">Niveau :</span><span id="niveau" class="odometer">1</span> |
            <span style="margin-right: 6px; margin-left: 10px;">Ouvreurs :</span><span id="ouvreurs"
                class="odometer">4</span> |
            <span style="margin-right: 6px; margin-left: 10px;">Score :</span><span id="score"
                class="odometer">300</span> |
            <span style="margin-right: 6px; margin-left: 10px;">Temps :</span><span id="temps">60</span>
        </div>
    </div>

    <audio id="sonGameOver" src="Sons/gameover.mp3" preload="auto"></audio>
    <audio id="sonTeleportation" src="Sons/teleportation.mp3" preload="auto"></audio>
    <audio id="sonDebutNiveau" src="Sons/debutNiveau.mp3" preload="auto"></audio>
    <audio id="sonNiveauReussi" src="Sons/niveauReussi.mp3" preload="auto"></audio>
    <audio id="sonJeuReussi" src="Sons/jeuReussi.mp3" preload="auto"></audio>
    <audio id="sonMur" src="Sons/mur.mp3" preload="auto"></audio>
    <audio id="sonTempsFini" src="Sons/sonTempsFini.mp3" preload="auto"></audio>

</body>

</html>